// Code generated by qtc from "page.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line page.qtpl:1
package openapi3html

//line page.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line page.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line page.qtpl:1
func StreamSpectrumUIPage(qw422016 *qt422016.Writer, data PageParams) {
//line page.qtpl:1
	qw422016.N().S(`<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>`)
//line page.qtpl:5
	qw422016.E().S(data.PageTitle)
//line page.qtpl:5
	qw422016.N().S(`</title>
	<!-- http://tabulator.info/examples/4.7?#filter-header -->
	<link href="https://unpkg.com/tabulator-tables@4.1.4/dist/css/tabulator.min.css" rel="stylesheet">
	<script type="text/javascript" src="https://unpkg.com/tabulator-tables@4.1.4/dist/js/tabulator.min.js"></script>
</head>
<body>
	<h1>`)
//line page.qtpl:11
	qw422016.N().S(data.PageLinkHTML())
//line page.qtpl:11
	qw422016.N().S(`</h1>

	<div id="`)
//line page.qtpl:13
	qw422016.E().S(data.TableDomID)
//line page.qtpl:13
	qw422016.N().S(`"></div>

<script>

    var tabledata = `)
//line page.qtpl:17
	qw422016.N().Z(data.TableJSONBytesOrEmpty())
//line page.qtpl:17
	qw422016.N().S(`;

    //custom max min header filter
    var minMaxFilterEditor = function(cell, onRendered, success, cancel, editorParams){

    var end;

    var container = document.createElement("span");

    //create and style inputs
    var start = document.createElement("input");
    start.setAttribute("type", "number");
    start.setAttribute("placeholder", "Min");
    start.setAttribute("min", 0);
    start.setAttribute("max", 100);
    start.style.padding = "4px";
    start.style.width = "50%";
    start.style.boxSizing = "border-box";

    start.value = cell.getValue();

    function buildValues(){
        success({
            start:start.value,
            end:end.value,
        });
    }

    function keypress(e){
        if(e.keyCode == 13){
            buildValues();
        }

        if(e.keyCode == 27){
            cancel();
        }
    }

    end = start.cloneNode();
    end.setAttribute("placeholder", "Max");

    start.addEventListener("change", buildValues);
    start.addEventListener("blur", buildValues);
    start.addEventListener("keydown", keypress);

    end.addEventListener("change", buildValues);
    end.addEventListener("blur", buildValues);
    end.addEventListener("keydown", keypress);

    container.appendChild(start);
    container.appendChild(end);

    return container;
 }

//custom max min filter function
function minMaxFilterFunction(headerValue, rowValue, rowData, filterParams){
    //headerValue - the value of the header filter element
    //rowValue - the value of the column in this row
    //rowData - the data for the row being filtered
    //filterParams - params object passed to the headerFilterFuncParams property

        if(rowValue){
            if(headerValue.start != ""){
                if(headerValue.end != ""){
                    return rowValue >= headerValue.start && rowValue <= headerValue.end;
                }else{
                    return rowValue >= headerValue.start;
                }
            }else{
                if(headerValue.end != ""){
                    return rowValue <= headerValue.end;
                }
            }
        }

    return true; //must return a boolean, true if it passes the filter.
}

var table = new Tabulator("#`)
//line page.qtpl:96
	qw422016.E().S(data.TableDomID)
//line page.qtpl:96
	qw422016.N().S(`", {
    //height:"500px",
    layout:"fitColumns",
    data:tabledata, //load initial data into table
    columns: `)
//line page.qtpl:100
	qw422016.N().Z(data.TabulatorColumnsJSONBytesOrEmpty())
//line page.qtpl:100
	qw422016.N().S(`,
	rowClick:function(e, row){
		var data = row.getData();
        var docsURL = data["DocsURL"];
        if ((docsURL?.trim()?.length || 0) > 0) {
            window.open(docsURL, '_blank');
        }
	},
});
</script>

</body>
</html>
`)
//line page.qtpl:113
}

//line page.qtpl:113
func WriteSpectrumUIPage(qq422016 qtio422016.Writer, data PageParams) {
//line page.qtpl:113
	qw422016 := qt422016.AcquireWriter(qq422016)
//line page.qtpl:113
	StreamSpectrumUIPage(qw422016, data)
//line page.qtpl:113
	qt422016.ReleaseWriter(qw422016)
//line page.qtpl:113
}

//line page.qtpl:113
func SpectrumUIPage(data PageParams) string {
//line page.qtpl:113
	qb422016 := qt422016.AcquireByteBuffer()
//line page.qtpl:113
	WriteSpectrumUIPage(qb422016, data)
//line page.qtpl:113
	qs422016 := string(qb422016.B)
//line page.qtpl:113
	qt422016.ReleaseByteBuffer(qb422016)
//line page.qtpl:113
	return qs422016
//line page.qtpl:113
}
